import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Download, FileText, Image, Code, CheckCircle } from "lucide-react";
import { useWeekendStore } from "@/store/weekendStore";
import { toast } from "@/components/ui/use-toast";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface ExportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const ExportDialog = ({ open, onOpenChange }: ExportDialogProps) => {
  const {
    schedule,
    availableDays,
    currentTheme,
    weekendLength,
    selectedWeekendDates,
    currentThreadId,
    threads,
  } = useWeekendStore();
  const [isExporting, setIsExporting] = useState<string | null>(null);

  const totalActivities = availableDays.reduce(
    (sum, day) => sum + schedule[day].length,
    0
  );

  const formatDate = (date: Date) => {
    return date.toLocaleDateString("en-US", {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  // Get user name from current thread
  const currentThread = threads[currentThreadId];
  const userName = currentThread?.ownerUsername || "Weekend Planner User";

  const exportToPDF = async () => {
    setIsExporting("pdf");
    try {
      // Create a temporary element to render the schedule with emojis
      const tempDiv = document.createElement("div");
      tempDiv.style.position = "absolute";
      tempDiv.style.top = "-9999px";
      tempDiv.style.left = "-9999px";
      tempDiv.style.width = "800px";
      tempDiv.style.padding = "40px";
      tempDiv.style.backgroundColor = "#ffffff";
      tempDiv.style.fontFamily = "Arial, sans-serif";
      tempDiv.style.fontSize = "14px";
      tempDiv.style.lineHeight = "1.4";

      const scheduleHTML = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="font-size: 28px; margin-bottom: 10px; color: #333; font-weight: bold;">${userName}'s Weekend Schedule</h1>
          <p style="font-size: 16px; color: #666; margin-bottom: 5px;">${totalActivities} activities planned for ${weekendLength} weekend</p>
          ${
            selectedWeekendDates.length > 0
              ? `<p style="font-size: 14px; color: #888;">${selectedWeekendDates
                  .map(formatDate)
                  .join(" - ")}</p>`
              : ""
          }
        </div>
        
        ${availableDays
          .map((day) =>
            schedule[day].length > 0
              ? `
              <div style="margin-bottom: 25px;">
                <h2 style="font-size: 20px; margin-bottom: 15px; color: #333; border-bottom: 2px solid #eee; padding-bottom: 5px; font-weight: bold;">
                  ${day.charAt(0).toUpperCase() + day.slice(1)} (${
                  schedule[day].length
                } activities)
                </h2>
                <div style="display: grid; gap: 8px;">
                  ${schedule[day]
                    .map(
                      (activity, index) => `
                    <div style="display: flex; align-items: flex-start; padding: 10px; background-color: #f8f9fa; border-radius: 6px; border-left: 4px solid #4f46e5;">
                      <span style="font-size: 18px; margin-right: 10px; margin-top: 2px;">${
                        activity.icon
                      }</span>
                      <div style="flex: 1;">
                        <div style="font-weight: bold; font-size: 14px; color: #333; margin-bottom: 2px;">${
                          index + 1
                        }. ${activity.name}</div>
                        <div style="font-size: 12px; color: #666; margin-bottom: 4px;">${
                          activity.description
                        }</div>
                        <div style="font-size: 10px; color: #888;">
                          <span style="background-color: #e5e7eb; padding: 2px 6px; border-radius: 10px; margin-right: 6px;">${activity.category.toUpperCase()}</span>
                          ${
                            activity.mood
                              ? `<span>Mood: ${activity.mood}</span>`
                              : ""
                          }
                        </div>
                      </div>
                    </div>
                  `
                    )
                    .join("")}
                </div>
              </div>
            `
              : ""
          )
          .join("")}
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 10px; color: #888;">
          Generated by Weekend Planner • ${new Date().toLocaleDateString()}
        </div>
      `;

      tempDiv.innerHTML = scheduleHTML;
      document.body.appendChild(tempDiv);

      // Convert to canvas with high quality
      const canvas = await html2canvas(tempDiv, {
        backgroundColor: "#ffffff",
        scale: 2,
        useCORS: true,
        allowTaint: true,
        width: 800,
        height: tempDiv.scrollHeight,
      });

      document.body.removeChild(tempDiv);

      // Create PDF with the canvas image
      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = pageWidth - 20; // 10mm margin on each side
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Add the image to PDF
      const imgData = canvas.toDataURL("image/png");
      pdf.addImage(imgData, "PNG", 10, 10, imgWidth, imgHeight);

      // If content is longer than one page, add additional pages
      if (imgHeight > pageHeight - 20) {
        const totalPages = Math.ceil(imgHeight / (pageHeight - 20));
        for (let i = 1; i < totalPages; i++) {
          pdf.addPage();
          const yOffset = -(i * (pageHeight - 20));
          pdf.addImage(imgData, "PNG", 10, 10 + yOffset, imgWidth, imgHeight);
        }
      }

      pdf.save(
        `${userName
          .toLowerCase()
          .replace(/\s+/g, "-")}-weekend-schedule-${weekendLength}.pdf`
      );

      toast({
        title: "PDF exported successfully!",
        description: "Your weekend schedule has been downloaded with emojis.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportToJSON = () => {
    setIsExporting("json");
    try {
      const exportData = {
        title: `${userName}'s Weekend Schedule`,
        userName: userName,
        createdAt: new Date().toISOString(),
        theme: currentTheme,
        weekendLength,
        dates: selectedWeekendDates,
        totalActivities,
        schedule: Object.fromEntries(
          availableDays.map((day) => [
            day,
            schedule[day].map((activity) => ({
              name: activity.name,
              description: activity.description,
              category: activity.category,
              icon: activity.icon,
              mood: activity.mood,
            })),
          ])
        ),
      };

      const dataStr = JSON.stringify(exportData, null, 2);
      const dataUri =
        "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

      const exportFileDefaultName = `${userName
        .toLowerCase()
        .replace(/\s+/g, "-")}-weekend-schedule-${weekendLength}.json`;

      const linkElement = document.createElement("a");
      linkElement.setAttribute("href", dataUri);
      linkElement.setAttribute("download", exportFileDefaultName);
      linkElement.click();

      toast({
        title: "JSON exported successfully!",
        description: "Your schedule data has been downloaded.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule data.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportAsImage = async () => {
    setIsExporting("image");
    try {
      // Create a temporary element to render the schedule
      const tempDiv = document.createElement("div");
      tempDiv.style.position = "absolute";
      tempDiv.style.top = "-9999px";
      tempDiv.style.left = "-9999px";
      tempDiv.style.width = "800px";
      tempDiv.style.padding = "40px";
      tempDiv.style.backgroundColor = "#ffffff";
      tempDiv.style.fontFamily = "Arial, sans-serif";

      const scheduleHTML = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="font-size: 32px; margin-bottom: 10px; color: #333;">${userName}'s Weekend Schedule</h1>
          <p style="font-size: 16px; color: #666; margin-bottom: 5px;">${totalActivities} activities planned for ${weekendLength} weekend</p>
          ${
            selectedWeekendDates.length > 0
              ? `<p style="font-size: 14px; color: #888;">${selectedWeekendDates
                  .map(formatDate)
                  .join(" - ")}</p>`
              : ""
          }
        </div>
        
        ${availableDays
          .map((day) =>
            schedule[day].length > 0
              ? `
            <div style="margin-bottom: 25px;">
              <h2 style="font-size: 24px; margin-bottom: 15px; color: #333; border-bottom: 2px solid #eee; padding-bottom: 5px;">
                ${day.charAt(0).toUpperCase() + day.slice(1)} (${
                  schedule[day].length
                } activities)
              </h2>
              <div style="display: grid; gap: 10px;">
                ${schedule[day]
                  .map(
                    (activity, index) => `
                  <div style="display: flex; align-items: center; padding: 12px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #4f46e5;">
                    <span style="font-size: 20px; margin-right: 12px;">${
                      activity.icon
                    }</span>
                    <div style="flex: 1;">
                      <div style="font-weight: bold; font-size: 16px; color: #333;">${
                        activity.name
                      }</div>
                      <div style="font-size: 14px; color: #666; margin-top: 2px;">${
                        activity.description
                      }</div>
                      <div style="font-size: 12px; color: #888; margin-top: 4px;">
                        <span style="background-color: #e5e7eb; padding: 2px 8px; border-radius: 12px; margin-right: 8px;">${activity.category.toUpperCase()}</span>
                        ${
                          activity.mood
                            ? `<span>Mood: ${activity.mood}</span>`
                            : ""
                        }
                      </div>
                    </div>
                  </div>
                `
                  )
                  .join("")}
              </div>
            </div>
          `
              : ""
          )
          .join("")}
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #888;">
          Generated by Weekend Planner • ${new Date().toLocaleDateString()}
        </div>
      `;

      tempDiv.innerHTML = scheduleHTML;
      document.body.appendChild(tempDiv);

      const canvas = await html2canvas(tempDiv, {
        backgroundColor: "#ffffff",
        scale: 2,
        useCORS: true,
      });

      document.body.removeChild(tempDiv);

      // Convert canvas to blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          const url = URL.createObjectURL(blob);
          const link = document.createElement("a");
          link.href = url;
          link.download = `${userName
            .toLowerCase()
            .replace(/\s+/g, "-")}-weekend-schedule-${weekendLength}.png`;
          link.click();
          URL.revokeObjectURL(url);

          toast({
            title: "Image exported successfully!",
            description: "Your schedule image has been downloaded.",
          });
        }
      }, "image/png");
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule image.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const copyToClipboard = () => {
    setIsExporting("clipboard");
    try {
      const scheduleText =
        `🗓️ ${userName.toUpperCase()}'S WEEKEND SCHEDULE\n\n` +
        `📅 ${totalActivities} activities planned for ${weekendLength} weekend\n` +
        (selectedWeekendDates.length > 0
          ? `📍 ${selectedWeekendDates.map(formatDate).join(" - ")}\n`
          : "") +
        `\n` +
        availableDays
          .map((day) =>
            schedule[day].length > 0
              ? `📋 ${day.toUpperCase()} (${
                  schedule[day].length
                } activities)\n` +
                schedule[day]
                  .map(
                    (activity, index) =>
                      `${index + 1}. ${activity.icon} ${activity.name}\n   ${
                        activity.description
                      }` +
                      (activity.mood ? ` | Mood: ${activity.mood}` : "") +
                      `\n`
                  )
                  .join("") +
                `\n`
              : ""
          )
          .join("") +
        `Generated by Weekend Planner 🌟`;

      navigator.clipboard.writeText(scheduleText);
      toast({
        title: "Copied to clipboard!",
        description: "Your schedule has been copied as text.",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy schedule to clipboard.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportOptions = [
    {
      id: "pdf",
      title: "Export as PDF",
      description: "Professional format with full details",
      icon: FileText,
      action: exportToPDF,
      recommended: true,
    },
    {
      id: "image",
      title: "Export as Image",
      description: "Visual format for sharing",
      icon: Image,
      action: exportAsImage,
    },
    {
      id: "json",
      title: "Export as JSON",
      description: "Raw data for developers",
      icon: Code,
      action: exportToJSON,
    },
    {
      id: "clipboard",
      title: "Copy to Clipboard",
      description: "Quick text format",
      icon: CheckCircle,
      action: copyToClipboard,
    },
  ];

  if (totalActivities === 0) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Export Schedule</DialogTitle>
          </DialogHeader>
          <div className="text-center py-8">
            <p className="text-muted-foreground mb-4">
              No activities scheduled yet. Add some activities to your weekend
              plan to export.
            </p>
            <Button onClick={() => onOpenChange(false)}>Got it</Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Export Your Schedule</DialogTitle>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Badge variant="outline">{totalActivities} activities</Badge>
            <Badge variant="outline">{weekendLength} weekend</Badge>
            <Badge variant="outline">{availableDays.length} days</Badge>
          </div>
        </DialogHeader>

        <div className="space-y-3">
          {exportOptions.map((option) => {
            const Icon = option.icon;
            const isLoading = isExporting === option.id;

            return (
              <Card
                key={option.id}
                className="p-4 hover:bg-muted/50 transition-colors cursor-pointer"
                onClick={!isLoading ? option.action : undefined}
              >
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-primary/10">
                    <Icon className="h-5 w-5 text-primary" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-medium">{option.title}</h3>
                      {option.recommended && (
                        <Badge variant="secondary" className="text-xs">
                          Recommended
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {option.description}
                    </p>
                  </div>
                  <Button
                    size="sm"
                    variant="outline"
                    disabled={isLoading}
                    className="ml-auto"
                  >
                    {isLoading ? (
                      <div className="h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent" />
                    ) : (
                      <Download className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </Card>
            );
          })}
        </div>

        <Separator />

        <div className="text-xs text-muted-foreground text-center">
          Your schedule includes{" "}
          {availableDays.filter((day) => schedule[day].length > 0).length}{" "}
          planned days with detailed activities and descriptions.
        </div>
      </DialogContent>
    </Dialog>
  );
};
