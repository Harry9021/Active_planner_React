import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Download, FileText, Image, Code, CheckCircle } from "lucide-react";
import { useWeekendStore } from "@/store/weekendStore";
import { toast } from "@/components/ui/use-toast";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface ExportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const ExportDialog = ({ open, onOpenChange }: ExportDialogProps) => {
  const { schedule, availableDays, currentTheme, weekendLength, selectedWeekendDates } = useWeekendStore();
  const [isExporting, setIsExporting] = useState<string | null>(null);

  const totalActivities = availableDays.reduce((sum, day) => sum + schedule[day].length, 0);

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  const exportToPDF = async () => {
    setIsExporting("pdf");
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      let yPosition = margin;

      // Title
      pdf.setFontSize(24);
      pdf.setFont(undefined, 'bold');
      pdf.text("Weekend Schedule", margin, yPosition);
      yPosition += 15;

      // Subtitle
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      pdf.text(`${totalActivities} activities planned for ${weekendLength} weekend`, margin, yPosition);
      yPosition += 10;

      if (selectedWeekendDates.length > 0) {
        pdf.text(`Dates: ${selectedWeekendDates.map(formatDate).join(" - ")}`, margin, yPosition);
        yPosition += 15;
      } else {
        yPosition += 10;
      }

      // Add line
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 15;

      // Schedule content
      availableDays.forEach((day) => {
        if (schedule[day].length > 0) {
          // Check if we need a new page
          if (yPosition > pageHeight - 60) {
            pdf.addPage();
            yPosition = margin;
          }

          // Day header
          pdf.setFontSize(16);
          pdf.setFont(undefined, 'bold');
          const dayTitle = day.charAt(0).toUpperCase() + day.slice(1);
          pdf.text(dayTitle, margin, yPosition);
          yPosition += 8;

          pdf.setFontSize(10);
          pdf.setFont(undefined, 'normal');
          pdf.text(`${schedule[day].length} activities`, margin, yPosition);
          yPosition += 12;

          // Activities
          schedule[day].forEach((activity, index) => {
            if (yPosition > pageHeight - 30) {
              pdf.addPage();
              yPosition = margin;
            }

            pdf.setFontSize(11);
            pdf.setFont(undefined, 'normal');
            
            // Activity number and emoji
            pdf.text(`${index + 1}. ${activity.icon}`, margin + 5, yPosition);
            
            // Activity name
            pdf.setFont(undefined, 'bold');
            pdf.text(activity.name, margin + 20, yPosition);
            
            // Activity description
            pdf.setFont(undefined, 'normal');
            pdf.text(`- ${activity.description}`, margin + 20, yPosition + 5);
            
            // Category badge
            pdf.setFontSize(9);
            pdf.text(`[${activity.category.toUpperCase()}]`, margin + 20, yPosition + 10);
            
            // Mood if present
            if (activity.mood) {
              pdf.text(`Mood: ${activity.mood}`, margin + 80, yPosition + 10);
            }

            yPosition += 18;
          });
          
          yPosition += 8;
        }
      });

      // Footer
      pdf.setFontSize(8);
      pdf.text("Generated by Weekend Planner", margin, pageHeight - 15);
      pdf.text(new Date().toLocaleDateString(), pageWidth - 60, pageHeight - 15);

      pdf.save(`weekend-schedule-${weekendLength}.pdf`);
      
      toast({
        title: "PDF exported successfully!",
        description: "Your weekend schedule has been downloaded.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportToJSON = () => {
    setIsExporting("json");
    try {
      const exportData = {
        title: "My Weekend Schedule",
        createdAt: new Date().toISOString(),
        theme: currentTheme,
        weekendLength,
        dates: selectedWeekendDates,
        totalActivities,
        schedule: Object.fromEntries(
          availableDays.map(day => [
            day,
            schedule[day].map(activity => ({
              name: activity.name,
              description: activity.description,
              category: activity.category,
              icon: activity.icon,
              mood: activity.mood,
            }))
          ])
        ),
      };

      const dataStr = JSON.stringify(exportData, null, 2);
      const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
      
      const exportFileDefaultName = `weekend-schedule-${weekendLength}.json`;
      
      const linkElement = document.createElement('a');
      linkElement.setAttribute('href', dataUri);
      linkElement.setAttribute('download', exportFileDefaultName);
      linkElement.click();

      toast({
        title: "JSON exported successfully!",
        description: "Your schedule data has been downloaded.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule data.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportAsImage = async () => {
    setIsExporting("image");
    try {
      // Create a temporary element to render the schedule
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.top = '-9999px';
      tempDiv.style.left = '-9999px';
      tempDiv.style.width = '800px';
      tempDiv.style.padding = '40px';
      tempDiv.style.backgroundColor = '#ffffff';
      tempDiv.style.fontFamily = 'Arial, sans-serif';

      const scheduleHTML = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="font-size: 32px; margin-bottom: 10px; color: #333;">Weekend Schedule</h1>
          <p style="font-size: 16px; color: #666; margin-bottom: 5px;">${totalActivities} activities planned for ${weekendLength} weekend</p>
          ${selectedWeekendDates.length > 0 ? `<p style="font-size: 14px; color: #888;">${selectedWeekendDates.map(formatDate).join(" - ")}</p>` : ''}
        </div>
        
        ${availableDays.map(day => 
          schedule[day].length > 0 ? `
            <div style="margin-bottom: 25px;">
              <h2 style="font-size: 24px; margin-bottom: 15px; color: #333; border-bottom: 2px solid #eee; padding-bottom: 5px;">
                ${day.charAt(0).toUpperCase() + day.slice(1)} (${schedule[day].length} activities)
              </h2>
              <div style="display: grid; gap: 10px;">
                ${schedule[day].map((activity, index) => `
                  <div style="display: flex; align-items: center; padding: 12px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #4f46e5;">
                    <span style="font-size: 20px; margin-right: 12px;">${activity.icon}</span>
                    <div style="flex: 1;">
                      <div style="font-weight: bold; font-size: 16px; color: #333;">${activity.name}</div>
                      <div style="font-size: 14px; color: #666; margin-top: 2px;">${activity.description}</div>
                      <div style="font-size: 12px; color: #888; margin-top: 4px;">
                        <span style="background-color: #e5e7eb; padding: 2px 8px; border-radius: 12px; margin-right: 8px;">${activity.category.toUpperCase()}</span>
                        ${activity.mood ? `<span>Mood: ${activity.mood}</span>` : ''}
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''
        ).join('')}
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #888;">
          Generated by Weekend Planner • ${new Date().toLocaleDateString()}
        </div>
      `;

      tempDiv.innerHTML = scheduleHTML;
      document.body.appendChild(tempDiv);

      const canvas = await html2canvas(tempDiv, {
        backgroundColor: '#ffffff',
        scale: 2,
        useCORS: true,
      });

      document.body.removeChild(tempDiv);

      // Convert canvas to blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = `weekend-schedule-${weekendLength}.png`;
          link.click();
          URL.revokeObjectURL(url);

          toast({
            title: "Image exported successfully!",
            description: "Your schedule image has been downloaded.",
          });
        }
      }, 'image/png');
    } catch (error) {
      toast({
        title: "Export failed",
        description: "There was an error exporting your schedule image.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const copyToClipboard = () => {
    setIsExporting("clipboard");
    try {
      const scheduleText = `🗓️ WEEKEND SCHEDULE\n\n` +
        `📅 ${totalActivities} activities planned for ${weekendLength} weekend\n` +
        (selectedWeekendDates.length > 0 ? `📍 ${selectedWeekendDates.map(formatDate).join(" - ")}\n` : '') +
        `\n` +
        availableDays.map(day => 
          schedule[day].length > 0 ? 
            `📋 ${day.toUpperCase()} (${schedule[day].length} activities)\n` +
            schedule[day].map((activity, index) => 
              `${index + 1}. ${activity.icon} ${activity.name}\n   ${activity.description}` +
              (activity.mood ? ` | Mood: ${activity.mood}` : '') + `\n`
            ).join('') + `\n`
          : ''
        ).join('') +
        `Generated by Weekend Planner 🌟`;

      navigator.clipboard.writeText(scheduleText);
      toast({
        title: "Copied to clipboard!",
        description: "Your schedule has been copied as text.",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Unable to copy schedule to clipboard.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(null);
    }
  };

  const exportOptions = [
    {
      id: "pdf",
      title: "Export as PDF",
      description: "Professional format with full details",
      icon: FileText,
      action: exportToPDF,
      recommended: true,
    },
    {
      id: "image",
      title: "Export as Image",
      description: "Visual format for sharing",
      icon: Image,
      action: exportAsImage,
    },
    {
      id: "json",
      title: "Export as JSON",
      description: "Raw data for developers",
      icon: Code,
      action: exportToJSON,
    },
    {
      id: "clipboard",
      title: "Copy to Clipboard",
      description: "Quick text format",
      icon: CheckCircle,
      action: copyToClipboard,
    },
  ];

  if (totalActivities === 0) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Export Schedule</DialogTitle>
          </DialogHeader>
          <div className="text-center py-8">
            <p className="text-muted-foreground mb-4">
              No activities scheduled yet. Add some activities to your weekend plan to export.
            </p>
            <Button onClick={() => onOpenChange(false)}>
              Got it
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Export Your Schedule</DialogTitle>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Badge variant="outline">{totalActivities} activities</Badge>
            <Badge variant="outline">{weekendLength} weekend</Badge>
            <Badge variant="outline">{availableDays.length} days</Badge>
          </div>
        </DialogHeader>

        <div className="space-y-3">
          {exportOptions.map((option) => {
            const Icon = option.icon;
            const isLoading = isExporting === option.id;

            return (
              <Card
                key={option.id}
                className="p-4 hover:bg-muted/50 transition-colors cursor-pointer"
                onClick={!isLoading ? option.action : undefined}
              >
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-primary/10">
                    <Icon className="h-5 w-5 text-primary" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-medium">{option.title}</h3>
                      {option.recommended && (
                        <Badge variant="secondary" className="text-xs">
                          Recommended
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {option.description}
                    </p>
                  </div>
                  <Button
                    size="sm"
                    variant="outline"
                    disabled={isLoading}
                    className="ml-auto"
                  >
                    {isLoading ? (
                      <div className="h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent" />
                    ) : (
                      <Download className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </Card>
            );
          })}
        </div>

        <Separator />

        <div className="text-xs text-muted-foreground text-center">
          Your schedule includes {availableDays.filter(day => schedule[day].length > 0).length} planned days with detailed activities and descriptions.
        </div>
      </DialogContent>
    </Dialog>
  );
};